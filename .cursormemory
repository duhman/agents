# Cursor Memories - Project Context

## Project Identity

This is an OpenAI-powered email automation system for Elaway that handles subscription cancellation requests with a Human-in-the-Middle (HITM) review flow via Slack.

## Core Architecture

- **Pattern**: Email ingestion → OpenAI Agents SDK orchestration → Slack HITM → Send reply → Store feedback → Fine-tune
- **Tech Stack**: Node 20, TypeScript, OpenAI Agents SDK (`@openai/agents`), Slack Bolt, Vercel Functions, Postgres (Drizzle), Zod validation
- **Monorepo**: pnpm workspaces with Turborepo for parallel builds
- **RAG**: OpenAI Vector Store integrated for contextual retrieval (env: `OPENAI_VECTOR_STORE_ID`)

## Key Constraints

- Norwegian language default, English fallback
- End-of-month cancellation policy (must be mentioned in drafts)
- PII masking before any LLM calls (emails/phones/addresses)
- Vercel Functions must complete <5s (Slack webhooks timeout at 3s)
- Minimum 500 approved examples required before fine-tuning

## Database Schema

- `tickets`: customer email (masked), reason, move_date
- `drafts`: AI-generated responses with confidence scores
- `human_reviews`: approve/reject/edit decisions for training

## Important Patterns (2025)

- **OpenAI Agents SDK**: Primary runtime (`@openai/agents`) with Agents, Handoffs, Tools, and tracing
- **Agent Architecture**: `emailProcessingAgent` → `triageAgent` → `cancellationAgent` with specialized tools
- **Tools**: `maskPiiTool`, `vectorStoreSearchTool`, `createTicketTool`, `createDraftTool`, `calculateConfidenceTool`, `generateDraftTool`, `postToSlackTool`
- **Optional fields**: Must use `.optional().nullable()` pattern for Agents SDK compatibility
- **Drizzle**: Use `push` for dev, `generate` + `migrate` for prod
- **Workspace references**: `"@agents/core": "workspace:*"`
- **Vector Store Tool**: `search_vector_store` available in `@agents/agents-runtime`, used by `cancellationAgent` to fetch context for relocation cases
- **Deterministic Fallback**: If agent doesn't create ticket/draft, fallback to deterministic templates and DB operations

## File Locations

- Documentation: `documentation/` (prd, policies, prompts, guides)
- Prompts & schemas: `packages/prompts/src/templates.ts`
- Database schema: `packages/db/src/schema.ts`
- PII masking: `packages/core/src/index.ts`
- Agent logic: `apps/agent/src/index.ts` (Agents SDK implementation)
- Slack HITM: `apps/slack-bot/src/index.ts`
- Agents runtime: `packages/agents-runtime/src/` (agents, tools, guardrails)

## Success Metrics (KPIs)

- Response time: <15 minutes (goal: <2s for classification)
- Accuracy: ≥95% policy compliance
- Deflection: ≥70% handled without human edits post-FT
- Edit rate: Track for continuous improvement

## Common Commands

- `pnpm agent:dev` - Test agent locally
- `pnpm db:push` - Push schema changes (dev)
- `pnpm eval` - Run golden set evaluation
- `pnpm export-jsonl` - Export training data
- `pnpm finetune` - Launch OpenAI fine-tuning

## Team Decisions

- Decided to use Drizzle over Prisma for SQL-first approach
- Chose Vercel for hosting due to serverless simplicity
- External HubSpot data pipeline handles training data export
- OrbStack (Docker-compatible) for local Postgres
- **Agents SDK Migration**: Completed migration to `@openai/agents` as primary runtime
- **Production Ready**: Award-winning improvements implemented (connection pooling, error handling, structured logging)
