# Cursor Memories - Project Context

## Project Identity

This is an OpenAI-powered email automation system for Elaway that handles subscription cancellation requests with a Human-in-the-Middle (HITM) review flow via Slack.

## Core Architecture

- **Pattern**: Email ingestion → **Hybrid deterministic/AI processing** → Slack HITM → Send reply → Store feedback → Fine-tune
- **Tech Stack**: Node 20, TypeScript, **Hybrid processor** (deterministic + OpenAI fallback), Slack Bolt, Vercel Functions, Postgres (Drizzle), Zod validation
- **Monorepo**: pnpm workspaces with Turborepo for parallel builds
- **Processing**: Deterministic extraction first (fast, free), OpenAI fallback for complex cases (accurate, costs API)

## Key Constraints

- Norwegian language default, English fallback, Swedish support
- End-of-month cancellation policy (must be mentioned in drafts)
- PII masking before any LLM calls (emails/phones/addresses)
- Vercel Functions must complete <5s (Slack webhooks timeout at 3s)
- Minimum 500 approved examples required before fine-tuning

## Database Schema

- `tickets`: customer email (masked), reason, move_date
- `drafts`: AI-generated responses with confidence scores
- `human_reviews`: approve/reject/edit decisions for training

## Important Patterns (2025)

- **Hybrid Processing**: Deterministic extraction first, OpenAI fallback for complex cases
- **Enhanced Schemas**: `extractionSchemaEnhanced` with edge cases, confidence factors, Swedish support
- **Edge Case Detection**: Corporate accounts, app access issues, future dates, sameie concerns
- **Metrics Collection**: Track processing methods, performance, confidence scores
- **Optional fields**: Must use `.optional().nullable()` pattern for schema compatibility
- **Drizzle**: Use `push` for dev, `generate` + `migrate` for prod
- **Workspace references**: `"@agents/core": "workspace:*"`
- **Deterministic Fallback**: Always falls back to deterministic processing if OpenAI fails
- **Language Support**: Norwegian (default), English (fallback), Swedish (detected)

## File Locations

- Documentation: `documentation/` (prd, policies, prompts, guides)
- Prompts & schemas: `packages/prompts/src/templates.ts`
- Database schema: `packages/db/src/schema.ts`
- PII masking: `packages/core/src/index.ts`
- **Main processor**: `apps/agent/src/hybrid-processor.ts` (hybrid deterministic/AI)
- **Simplified processor**: `apps/agent/src/simplified-processor.ts` (pure deterministic)
- **Metrics**: `apps/agent/src/metrics.ts` (performance tracking)
- Slack HITM: `apps/slack-bot/src/index.ts`
- Agents runtime: `packages/agents-runtime/src/` (experimental/future)

## Success Metrics (KPIs)

- Response time: <15 minutes (goal: <2s for classification)
- Accuracy: ≥95% policy compliance
- Deflection: ≥70% handled without human edits post-FT
- Edit rate: Track for continuous improvement

## Common Commands

- `pnpm agent:dev` - Test agent locally
- `pnpm db:push` - Push schema changes (dev)
- `pnpm eval` - Run golden set evaluation
- `pnpm export-jsonl` - Export training data
- `pnpm finetune` - Launch OpenAI fine-tuning

## Team Decisions

- Decided to use Drizzle over Prisma for SQL-first approach
- Chose Vercel for hosting due to serverless simplicity
- External HubSpot data pipeline handles training data export
- OrbStack (Docker-compatible) for local Postgres
- **Architecture Simplification**: Migrated from complex multi-agent to hybrid deterministic/AI approach
- **Production Ready**: Award-winning improvements implemented (connection pooling, error handling, structured logging)
- **Language Support**: Added Swedish language detection and templates
