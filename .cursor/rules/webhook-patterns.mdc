---
description: Webhook handling patterns with enhanced reliability and multi-format support
globs: api/webhook.ts, api/**/*.ts
alwaysApply: false
---

# Webhook Patterns & Reliability

## Webhook Input Validation

✅ **DO:** Validate required subject and body fields

```typescript
interface WebhookPayload {
  source?: string;
  customerEmail?: string;
  subject?: string;     // Required field
  body?: string;        // Required field
}

// Validate required fields
const subject = typeof body.subject === "string" ? body.subject : "";
const bodyText = typeof body.body === "string" ? body.body : "";

if (!subject && !bodyText) {
  return res.status(400).json({ 
    error: "validation: subject and body are required",
    request_id: requestId 
  });
}

// Construct rawEmail format for internal processing only
const rawEmail = subject ? `Subject: ${subject}\n\n${bodyText}` : bodyText;
```

✅ **DO:** Log webhook validation details

```typescript
log("info", "Request validation successful", { 
  source, 
  requestId,
  subjectLength: subject.length,
  bodyLength: bodyText.length,
  subjectPreview: subject.slice(0, 50),
  bodyPreview: bodyText.slice(0, 50)
});
```

## Background Task Handling

✅ **DO:** Use Vercel waitUntil for background tasks

```typescript
import { waitUntil } from "@vercel/functions";

// Process critical path first
const result = await processEmail({
  source,
  customerEmail,
  rawEmail
});

// Handle Slack posting as background task
if (result.draft && result.ticket) {
  const slackChannel = process.env.SLACK_REVIEW_CHANNEL;
  if (slackChannel) {
    log("info", "Attempting to post draft to Slack", {
      requestId,
      channel: slackChannel,
      ticketId: result.ticket.id,
      draftId: result.draft.id,
      confidence: result.confidence
    });
    
    const slackTask = postReview(slackPayload).catch((error: unknown) => {
      log("error", "Slack posting failed", {
        error: parseErrorMessage(error),
        requestId,
        channel: slackChannel,
        ticketId: result.ticket?.id,
        draftId: result.draft?.id
      });
    });

    if (typeof waitUntil === "function") {
      waitUntil(slackTask);
    } else {
      void slackTask; // Non-Vercel environments
    }
  }
}
```

## Error Handling & Status Codes

✅ **DO:** Return appropriate HTTP status codes

```typescript
// Return appropriate status codes based on error type
const normalized = message.toLowerCase();
const statusCode = normalized.includes("quota")
  ? 402
  : normalized.includes("rate limit")
    ? 429
    : normalized.includes("timeout")
      ? 504
      : normalized.includes("validation")
        ? 400
        : 500;

res.status(statusCode).json({
  error: message || "Internal server error",
  request_id: requestId,
  processing_time_ms: duration
});
```

## Request Validation

✅ **DO:** Validate webhook requests thoroughly

```typescript
// Minimal validation (avoid zod/types at edge)
const rawBody = typeof req.body === "string" ? JSON.parse(req.body) : req.body ?? {};
const body = (rawBody ?? {}) as WebhookPayload;
const source = typeof body.source === "string" && body.source ? body.source : "hubspot";
const customerEmail = typeof body.customerEmail === "string" && body.customerEmail
  ? body.customerEmail
  : "masked@example.com";

if (req.method !== "POST") {
  log("warn", "Invalid HTTP method", { method: req.method, requestId });
  res.status(405).json({ error: "Method not allowed" });
  return;
}
```

## Performance Monitoring

✅ **DO:** Track processing duration and log performance

```typescript
const startTime = Date.now();
const requestId = randomUUID();

// ... process request ...

const duration = Date.now() - startTime;
log("info", "Webhook processing completed successfully", {
  duration,
  success: result.success,
  ticketId: result.ticket?.id,
  draftId: result.draft?.id,
  confidence: result.confidence,
  route: result.route,
  requestId
});

res.status(200).json({
  success: result.success,
  ticket_id: result.ticket?.id,
  draft_id: result.draft?.id,
  confidence: result.confidence,
  route: result.route,
  request_id: requestId,
  processing_time_ms: duration
});
```

## References

- @api/webhook.ts - Main webhook handler with latest patterns
- @apps/slack-bot/src/index.ts - Slack integration with retry logic
- @packages/core/src/index.ts - PII masking and validation utilities