---
description: OpenAI Vector Store usage and RAG patterns for agents - IMPLEMENTED
globs: packages/agents-runtime/src/**/*.ts, apps/agent/**/*.ts
alwaysApply: false
---

# Vector Store (RAG) Patterns

> **✅ IMPLEMENTED - Fully Operational**
> 
> Vector store functionality is **fully implemented** in the hybrid processor.
> RAG integration provides contextual retrieval for edge cases and payment issues.
> 
> Current hybrid approach uses deterministic extraction + OpenAI fallback + RAG context enhancement.

## Purpose

✅ **IMPLEMENTED**: Use OpenAI Vector Store to retrieve contextual snippets from 727 real cancellation tickets to improve drafts for edge cases and payment issues.

## Environment

```bash
OPENAI_VECTOR_STORE_ID=vs_...  # Required for RAG functionality
```

## Implementation

### RAG Context Retrieval
```typescript
// @apps/agent/src/rag-context.ts
export async function getVectorStoreContext(
  extraction: ExtractionResultEnhanced,
  logContext: LogContext
): Promise<string[]>
```

### Smart Querying Strategy
- **Standard cases**: Skip vector store (use templates)
- **Edge cases**: Query for similar scenarios
- **Payment issues**: Query for billing/refund guidance
- **Unclear intent**: Query for clarification examples

### Draft Enhancement
```typescript
// @packages/prompts/src/templates.ts
export function generateDraftEnhanced(params: EnhancedDraftParams): string
```

## Agent Integration

✅ **COMPLETED**: RAG integration in hybrid processor:
- `getVectorStoreContext()` called before draft generation
- Context passed to `generateDraftEnhanced()`
- Metrics tracking for RAG usage and performance

## DO / DON'T

- **DO** mask PII before any calls ✅
- **DO** limit results (≤3) and avoid dumping raw transcripts ✅
- **DO** fail gracefully if vector store unavailable ✅
- **DON'T** store or log raw vector contents with PII ✅

## Performance

- **Query time**: ~500-1000ms
- **Total processing**: <5s (within Vercel limits)
- **Cost**: ~$0.001 per query
- **Fallback**: Always works if vector store fails

## References

- @apps/agent/src/rag-context.ts - RAG context retrieval
- @packages/prompts/src/templates.ts - Enhanced draft generation
- @apps/agent/src/hybrid-processor.ts - RAG integration
- @documentation/project/prompts.md - RAG usage documentation
