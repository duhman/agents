---
description: Core principles for the agents project (privacy, compliance, schema-driven)
globs:
alwaysApply: true
---

# Core Principles

This project automates customer email responses using **hybrid deterministic/AI processing** with Slack HITM.

## 1. Privacy First

- Mask PII (emails/phones/addresses) before any LLM calls
- Use env variables for secrets; never hardcode tokens
- Store masked versions in database
- Never log raw customer data
- Always use `maskPII()` from `@agents/core` before LLM calls

```typescript
// ✅ DO: Mask before LLM call
const masked = maskPII(rawEmail);
const extraction = await extractWithOpenAI(masked);

// ❌ DON'T: Send raw PII to LLM
const extraction = await extractWithOpenAI(rawEmail);
```

## 2. Policy Compliance

- Norwegian default; English fallback; Swedish support
- End-of-month cancellation policy
- Encourage app self-service
- Be polite, concise, branded

## 3. Schema-Driven Development

Use Zod schemas for all validation and OpenAI structured outputs.

✅ **DO:** Always use `.nullable()` with `.optional()` for optional fields

```typescript
import { z } from "zod";

const ExtractionSchema = z.object({
  reason: z.string().nullable().optional(), // ✅ Both nullable and optional
  moveDate: z.string().nullable().optional(),
  language: z.enum(["no", "en", "sv"]).default("no")
});

// OpenAI structured outputs
const extraction = await openai.beta.chat.completions.parse({
  model: "gpt-4o-2024-08-06",
  messages: [{ role: "user", content: prompt }],
  response_format: zodResponseFormat(ExtractionSchema, "extraction")
});
```

❌ **DON'T:** Use optional without nullable (causes parsing errors)

```typescript
const BadSchema = z.object({
  reason: z.string().optional() // ❌ Missing nullable()
});
```

**Note:** Currently using Zod v3.22.0 due to OpenAI SDK compatibility. Zod v4 upgrade blocked by `openai/helpers/zod` expecting v3 types and vendored `zod-to-json-schema` importing removed `ZodFirstPartyTypeKind`. See `openai/openai-node#1576` for upstream progress.

## 4. Hybrid Architecture

- **Deterministic first**: Pattern matching for standard cases (fast, free)
- **AI fallback**: OpenAI for complex/ambiguous cases (accurate, costs API)
- **Metrics collection**: Track processing methods and performance
- **Edge case detection**: Handle special scenarios (corporate accounts, future dates)

```typescript
// Try deterministic first
const deterministicResult = detectCancellationDeterministic(email);
if (deterministicResult.isCancellation) {
  metrics.processingMethod = "deterministic";
  return deterministicResult;
}

// Fall back to AI for complex cases
metrics.processingMethod = "ai";
return await extractWithOpenAI(maskedEmail);
```

## 5. Data Flow

- tickets → drafts → human_reviews (one row per reviewer action)
- Store provenance, decision (`approve`/`edit`/`reject`), and reviewer-provided text (final reply or rejection rationale)
- Humans still send customer replies manually today—automation can hook into the stored decisions later
- Export approved (and optionally edited) examples for fine-tuning when volume ≥500
- Slack is the only reviewer surface; the experimental operator UI has been retired

```typescript
// Always log review decisions
await createHumanReview({
  ticketId,
  draftId,
  decision: "approve" | "edit" | "reject",
  finalText: draftTextOrReason,
  reviewerSlackId: userId
});
```

## 6. Code Quality

- TypeScript strict mode
- Prefer explicit types over `any`
- Handle errors gracefully with retry logic
- Structured logging with request IDs for observability
- Request validation middleware for webhooks
- Exponential backoff for API failures

## Key Files

- `@documentation/project/prd.md` - Requirements & KPIs
- `@documentation/project/policies.md` - Tone/policy
- `@documentation/project/prompts.md` - Prompt templates
- `packages/prompts/src/templates-enhanced.ts` - Enhanced extraction schemas + drafting
- `@packages/core/src/index.ts` - PII masking
- `@packages/db/src/schema.ts` - Database schema
- `@apps/agent/src/hybrid-processor.ts` - Main hybrid processor
- `@apps/agent/src/simplified-processor.ts` - Pure deterministic processor
- `@apps/agent/src/metrics.ts` - Performance metrics collection
