---
description: Vercel deployment patterns and serverless constraints (Updated January 2025)
globs: apps/ingestor/**/*.ts, vercel.json, apps/**/api/**/*.ts
alwaysApply: false
---

# Vercel Deployment Best Practices (2025)

## Function Runtime Configuration

✅ **DO:** Configure runtime and regions explicitly

```typescript
// Configure Vercel function runtime
export const config = {
  runtime: "nodejs",
  regions: ["iad1"] // Specify region closest to your database
};
```

✅ **DO:** Set appropriate timeouts in vercel.json

```json
{
  "functions": {
    "api/*.ts": {
      "maxDuration": 30
    },
    "api/cron/*.ts": {
      "maxDuration": 300
    }
  }
}
```

## Database Connection Pooling (Latest 2025)

✅ **DO:** Use optimized connection pooling for Vercel

```typescript
import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";

const isServerless = process.env.VERCEL === "1" || process.env.AWS_LAMBDA_FUNCTION_NAME;

const queryClient = postgres(connectionString, {
  prepare: isServerless ? false : undefined,
  max: isServerless ? 1 : 10,
  idle_timeout: isServerless ? 20 : undefined,
  connect_timeout: 10,
  transform: {
    undefined: null // Transform undefined to null for PostgreSQL
  }
});

export const db = drizzle(queryClient, { schema });
```

❌ **DON'T:** Create connections outside request handlers

```typescript
// ❌ This will cause connection leaks
const db = drizzle(postgres(connectionString)); // Outside handler
```

## Function Constraints & Performance

⚠️ **Critical:** Keep functions <30s execution time (updated limit)

✅ **DO:** Use fire-and-forget for non-critical operations

```typescript
export default async function handler(req: VercelRequest, res: VercelResponse) {
  // Process critical path first
  const result = await processEmail(data);

  // Fire-and-forget non-critical operations
  postToSlack(result).catch(error => {
    logError("Slack posting failed", logContext, error);
    // Don't fail the webhook if Slack fails
  });

  // Return immediately
  return res.status(200).json({ success: true });
}
```

✅ **DO:** Use structured logging with request IDs

```typescript
import { generateRequestId, logInfo, logError, type LogContext } from "@agents/core";

export default async function handler(req: VercelRequest, res: VercelResponse) {
  const requestId = generateRequestId();
  const logContext: LogContext = { requestId };
  const startTime = Date.now();

  try {
    logInfo("Webhook received", logContext, {
      method: req.method,
      url: req.url
    });

    // Process request...

    const duration = Date.now() - startTime;
    logInfo("Request completed", { ...logContext, duration });

    return res.status(200).json({ success: true });
  } catch (error: any) {
    const duration = Date.now() - startTime;
    logError("Request failed", { ...logContext, duration }, error);

    return res.status(500).json({ error: error.message });
  }
}
```

## Environment Variables & Security

✅ **DO:** Validate environment variables with Zod

```typescript
import { z } from "zod";

export const envSchema = z.object({
  DATABASE_URL: z.string().url(),
  OPENAI_API_KEY: z.string().min(1),
  SLACK_BOT_TOKEN: z.string().min(1).optional(),
  SLACK_SIGNING_SECRET: z.string().min(1).optional()
});

const env = envSchema.parse(process.env);
```

✅ **DO:** Use proper HTTP status codes

```typescript
// Return appropriate status codes based on error type
const statusCode = error.message?.includes("quota")
  ? 402
  : error.message?.includes("rate limit")
    ? 429
    : error.message?.includes("timeout")
      ? 504
      : 500;

return res.status(statusCode).json({
  error: error.message || "Internal server error",
  request_id: requestId
});
```

## Cron Jobs & Scheduled Functions

✅ **DO:** Protect cron endpoints with authentication

```typescript
export default async function handler(req: VercelRequest, res: VercelResponse) {
  // Verify cron secret to prevent unauthorized access
  const authHeader = req.headers.authorization;
  if (authHeader !== `Bearer ${process.env.CRON_SECRET}`) {
    return res.status(401).json({ error: "Unauthorized" });
  }

  // Process cron job...
}
```

✅ **DO:** Define cron schedules in vercel.json

```json
{
  "crons": [
    {
      "path": "/api/cron/export-training-data",
      "schedule": "0 0 1 * *" // Monthly on 1st at midnight
    }
  ]
}
```

## Health Check Endpoints

✅ **DO:** Implement comprehensive health checks

```typescript
export default async function handler(req: VercelRequest, res: VercelResponse) {
  const startTime = Date.now();

  try {
    const [database, openai, slack] = await Promise.all([
      checkDatabase(),
      checkOpenAI(),
      checkSlack()
    ]);

    const duration = Date.now() - startTime;

    const health = {
      status: "healthy",
      timestamp: new Date().toISOString(),
      duration_ms: duration,
      services: { database, openai, slack },
      version: process.env.VERCEL_GIT_COMMIT_SHA || "local",
      environment: process.env.NODE_ENV || "development"
    };

    // Check if any service is unhealthy
    const unhealthyServices = Object.values(health.services).filter(
      service => service.status === "unhealthy"
    );

    if (unhealthyServices.length > 0) {
      health.status = "degraded";
      return res.status(503).json(health);
    }

    return res.status(200).json(health);
  } catch (error: any) {
    return res.status(500).json({
      status: "unhealthy",
      timestamp: new Date().toISOString(),
      error: error.message
    });
  }
}
```

## Vercel Configuration (vercel.json)

✅ **DO:** Configure comprehensive function settings

```json
{
  "buildCommand": "pnpm install && pnpm build",
  "functions": {
    "apps/ingestor/api/webhook.ts": {
      "maxDuration": 30
    },
    "apps/ingestor/api/health.ts": {
      "maxDuration": 10
    },
    "apps/ingestor/api/cron/export-training-data.ts": {
      "maxDuration": 300
    }
  },
  "regions": ["iad1"],
  "framework": null,
  "env": {
    "NODE_ENV": "production"
  }
}
```

## Error Handling & Observability

✅ **DO:** Implement retry logic with exponential backoff

```typescript
import { withRetry } from "@agents/core";

const result = await withRetry(
  async () => {
    return await openai.chat.completions.parse({
      model: "gpt-4o-2024-08-06",
      messages: [
        /* ... */
      ],
      response_format: zodResponseFormat(extractionSchema, "extraction"),
      temperature: 0,
      timeout: 30000
    });
  },
  3, // maxRetries
  1000 // baseDelay
);
```

## References

- @apps/ingestor/api/webhook.ts - Webhook handler with latest patterns
- @apps/ingestor/api/health.ts - Health check endpoint
- @apps/ingestor/api/cron/export-training-data.ts - Cron example
- @vercel.json - Deployment configuration
- @packages/db/src/client.ts - Database connection pooling
- [Vercel Functions Documentation](https://vercel.com/docs/functions)
- [Vercel Connection Pooling Guide](https://vercel.com/guides/connection-pooling-with-functions)
