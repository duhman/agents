{
  "hooks": {
    "pre-request": {
      "enabled": true,
      "rules": [
        {
          "name": "Load Project Context",
          "condition": "always",
          "action": "inject_context",
          "context": [
            "@documentation/project/prd.md",
            "@documentation/project/policies.md",
            "@AWARD_WINNING_IMPROVEMENTS.md",
            ".cursorrules"
          ]
        },
        {
          "name": "Check for PII",
          "condition": "code_contains",
          "patterns": ["email", "phone", "address", "@", "\\d{3}-\\d{3}-\\d{4}"],
          "action": "warn",
          "message": "‚ö†Ô∏è Detected potential PII. Ensure maskPII() is used before any LLM calls or storage."
        },
        {
          "name": "OpenAI v5 Pattern Check",
          "condition": "file_type",
          "types": ["typescript", "javascript"],
          "action": "validate",
          "rules": [
            {
              "pattern": "openai\\.beta\\.chat\\.completions\\.parse",
              "suggestion": "Use openai.chat.completions.parse() (v5 API - beta namespace deprecated)"
            },
            {
              "pattern": "openai.*completions.*create(?!.*parse)",
              "suggestion": "Use openai.chat.completions.parse() with zodResponseFormat() for structured outputs"
            },
            {
              "pattern": "\\.nullable\\(\\)\\.optional\\(\\)",
              "suggestion": "Use .optional().nullable() order for OpenAI structured outputs"
            }
          ]
        },
        {
          "name": "Structured Logging Check",
          "condition": "code_contains",
          "patterns": ["console\\.log", "console\\.error", "console\\.warn"],
          "action": "suggest",
          "message": "üí° Consider using structured logging with logInfo/logError/logWarn from @agents/core for better observability"
        }
      ]
    },
    "post-response": {
      "enabled": true,
      "rules": [
        {
          "name": "Check Schema Changes",
          "condition": "file_modified",
          "files": ["packages/db/src/schema.ts"],
          "action": "remind",
          "message": "üìã Remember to run `pnpm db:push` to sync schema changes to database"
        },
        {
          "name": "Check Prompt Changes",
          "condition": "file_modified",
          "files": ["packages/prompts/src/templates.ts"],
          "action": "remind",
          "message": "üß™ Remember to run `pnpm eval` to test extraction accuracy after prompt changes"
        },
        {
          "name": "Check Core Changes",
          "condition": "file_modified",
          "files": ["packages/core/src/index.ts"],
          "action": "remind",
          "message": "üîÑ Core utilities updated. Consider running `pnpm build` to ensure all packages compile correctly"
        },
        {
          "name": "Format Code",
          "condition": "code_generated",
          "action": "auto_format",
          "formatter": "prettier"
        },
        {
          "name": "Retry Logic Validation",
          "condition": "code_contains",
          "patterns": ["openai.*chat.*completions"],
          "action": "validate",
          "rules": [
            {
              "pattern": "(?!.*withRetry)",
              "suggestion": "Wrap OpenAI API calls with withRetry() for production reliability"
            },
            {
              "pattern": "temperature\\s*:\\s*[^0]",
              "suggestion": "Use temperature: 0 for policy-critical extractions"
            },
            {
              "pattern": "timeout\\s*:\\s*(?:[1-9]\\d{0,3}|1\\d{4}|2[0-8]\\d{3}|29000)",
              "suggestion": "Set timeout: 30000 (30s) for serverless reliability"
            }
          ]
        },
        {
          "name": "Request ID Validation",
          "condition": "code_contains",
          "patterns": ["processEmail", "handler"],
          "action": "validate",
          "rules": [
            {
              "pattern": "(?!.*generateRequestId)",
              "suggestion": "Generate request ID with generateRequestId() for request tracking"
            },
            {
              "pattern": "(?!.*LogContext)",
              "suggestion": "Use LogContext interface for structured logging"
            }
          ]
        },
        {
          "name": "Vercel Function Validation",
          "condition": "file_path",
          "patterns": ["apps/.*/api/.*\\.ts"],
          "action": "validate",
          "rules": [
            {
              "pattern": "(?!.*export const config)",
              "suggestion": "Add runtime configuration: export const config = { runtime: 'nodejs', regions: ['iad1'] }"
            },
            {
              "pattern": "(?!.*isServerless)",
              "suggestion": "Use isServerless detection for optimized connection pooling"
            },
            {
              "pattern": "maxDuration.*[1-9]\\d{0,2}",
              "suggestion": "Set appropriate maxDuration in vercel.json (10s for health, 30s for webhooks, 300s for cron)"
            }
          ]
        }
      ]
    }
  }
}
